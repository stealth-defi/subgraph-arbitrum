// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Factory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Factory entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Factory must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Factory", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Factory | null {
    return changetype<Factory | null>(store.get_in_block("Factory", id));
  }

  static load(id: string): Factory | null {
    return changetype<Factory | null>(store.get("Factory", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vaultCount(): i32 {
    let value = this.get("vaultCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set vaultCount(value: i32) {
    this.set("vaultCount", Value.fromI32(value));
  }

  get vaults(): VaultLoader {
    return new VaultLoader("Factory", this.get("id")!.toString(), "vaults");
  }
}

export class Vault extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Vault entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Vault must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Vault", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Vault | null {
    return changetype<Vault | null>(store.get_in_block("Vault", id));
  }

  static load(id: string): Vault | null {
    return changetype<Vault | null>(store.get("Vault", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get vault(): Bytes {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set vault(value: Bytes) {
    this.set("vault", Value.fromBytes(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get share(): Bytes {
    let value = this.get("share");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set share(value: Bytes) {
    this.set("share", Value.fromBytes(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }

  get accManagementFeesToDAO(): BigInt {
    let value = this.get("accManagementFeesToDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accManagementFeesToDAO(value: BigInt) {
    this.set("accManagementFeesToDAO", Value.fromBigInt(value));
  }

  get accPerformanceFeesToDAO(): BigInt {
    let value = this.get("accPerformanceFeesToDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accPerformanceFeesToDAO(value: BigInt) {
    this.set("accPerformanceFeesToDAO", Value.fromBigInt(value));
  }

  get accManagementFeesToStrategists(): BigInt {
    let value = this.get("accManagementFeesToStrategists");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accManagementFeesToStrategists(value: BigInt) {
    this.set("accManagementFeesToStrategists", Value.fromBigInt(value));
  }

  get accPerformanceFeesToStrategists(): BigInt {
    let value = this.get("accPerformanceFeesToStrategists");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set accPerformanceFeesToStrategists(value: BigInt) {
    this.set("accPerformanceFeesToStrategists", Value.fromBigInt(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader("Vault", this.get("id")!.toString(), "deposits");
  }

  get rebalances(): RebalanceLoader {
    return new RebalanceLoader(
      "Vault",
      this.get("id")!.toString(),
      "rebalances",
    );
  }

  get redemptions(): RedeemLoader {
    return new RedeemLoader("Vault", this.get("id")!.toString(), "redemptions");
  }

  get depositsCount(): i32 {
    let value = this.get("depositsCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set depositsCount(value: i32) {
    this.set("depositsCount", Value.fromI32(value));
  }

  get rebalancesCount(): i32 {
    let value = this.get("rebalancesCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set rebalancesCount(value: i32) {
    this.set("rebalancesCount", Value.fromI32(value));
  }

  get redemptionsCount(): i32 {
    let value = this.get("redemptionsCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set redemptionsCount(value: i32) {
    this.set("redemptionsCount", Value.fromI32(value));
  }

  get managementFeesHarvests(): HarvestManagementFeesLoader {
    return new HarvestManagementFeesLoader(
      "Vault",
      this.get("id")!.toString(),
      "managementFeesHarvests",
    );
  }

  get performanceFeesHarvests(): HarvestPerformanceFeesLoader {
    return new HarvestPerformanceFeesLoader(
      "Vault",
      this.get("id")!.toString(),
      "performanceFeesHarvests",
    );
  }

  get snapshots(): VaultSnapshotLoader {
    return new VaultSnapshotLoader(
      "Vault",
      this.get("id")!.toString(),
      "snapshots",
    );
  }
}

export class VaultSnapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VaultSnapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VaultSnapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("VaultSnapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): VaultSnapshot | null {
    return changetype<VaultSnapshot | null>(
      store.get_in_block("VaultSnapshot", id),
    );
  }

  static load(id: string): VaultSnapshot | null {
    return changetype<VaultSnapshot | null>(store.get("VaultSnapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get factory(): string {
    let value = this.get("factory");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set factory(value: string) {
    this.set("factory", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get pendingPerfFees(): BigInt {
    let value = this.get("pendingPerfFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pendingPerfFees(value: BigInt) {
    this.set("pendingPerfFees", Value.fromBigInt(value));
  }

  get pendingMngFees(): BigInt {
    let value = this.get("pendingMngFees");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pendingMngFees(value: BigInt) {
    this.set("pendingMngFees", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get triggeredByEvent(): boolean {
    let value = this.get("triggeredByEvent");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set triggeredByEvent(value: boolean) {
    this.set("triggeredByEvent", Value.fromBoolean(value));
  }

  get positions(): Array<BigInt> {
    let value = this.get("positions");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set positions(value: Array<BigInt>) {
    this.set("positions", Value.fromBigIntArray(value));
  }

  get sharePrice(): BigInt {
    let value = this.get("sharePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePrice(value: BigInt) {
    this.set("sharePrice", Value.fromBigInt(value));
  }

  get tvl(): BigInt {
    let value = this.get("tvl");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tvl(value: BigInt) {
    this.set("tvl", Value.fromBigInt(value));
  }

  get assetsPrices(): Array<BigInt> {
    let value = this.get("assetsPrices");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set assetsPrices(value: Array<BigInt>) {
    this.set("assetsPrices", Value.fromBigIntArray(value));
  }

  get assetsBalances(): Array<BigInt> {
    let value = this.get("assetsBalances");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set assetsBalances(value: Array<BigInt>) {
    this.set("assetsBalances", Value.fromBigIntArray(value));
  }

  get tokens(): Array<Bytes> {
    let value = this.get("tokens");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytesArray();
    }
  }

  set tokens(value: Array<Bytes>) {
    this.set("tokens", Value.fromBytesArray(value));
  }
}

export class Deposit extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Deposit must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Deposit", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get_in_block("Deposit", id));
  }

  static load(id: string): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get baseTokenAmountIn(): BigInt {
    let value = this.get("baseTokenAmountIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set baseTokenAmountIn(value: BigInt) {
    this.set("baseTokenAmountIn", Value.fromBigInt(value));
  }

  get sharesMinted(): BigInt {
    let value = this.get("sharesMinted");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharesMinted(value: BigInt) {
    this.set("sharesMinted", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class Redeem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Redeem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Redeem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Redeem", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Redeem | null {
    return changetype<Redeem | null>(store.get_in_block("Redeem", id));
  }

  static load(id: string): Redeem | null {
    return changetype<Redeem | null>(store.get("Redeem", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get shareBurned(): BigInt {
    let value = this.get("shareBurned");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set shareBurned(value: BigInt) {
    this.set("shareBurned", Value.fromBigInt(value));
  }

  get amountReceived(): BigInt {
    let value = this.get("amountReceived");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountReceived(value: BigInt) {
    this.set("amountReceived", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class Rebalance extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Rebalance entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Rebalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Rebalance", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Rebalance | null {
    return changetype<Rebalance | null>(store.get_in_block("Rebalance", id));
  }

  static load(id: string): Rebalance | null {
    return changetype<Rebalance | null>(store.get("Rebalance", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get desiredSignals(): Array<BigInt> {
    let value = this.get("desiredSignals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set desiredSignals(value: Array<BigInt>) {
    this.set("desiredSignals", Value.fromBigIntArray(value));
  }

  get currentSignals(): Array<BigInt> {
    let value = this.get("currentSignals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set currentSignals(value: Array<BigInt>) {
    this.set("currentSignals", Value.fromBigIntArray(value));
  }

  get recordedSignals(): Array<BigInt> {
    let value = this.get("recordedSignals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigIntArray();
    }
  }

  set recordedSignals(value: Array<BigInt>) {
    this.set("recordedSignals", Value.fromBigIntArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get sharePriceAfter(): BigInt {
    let value = this.get("sharePriceAfter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set sharePriceAfter(value: BigInt) {
    this.set("sharePriceAfter", Value.fromBigInt(value));
  }
}

export class HarvestManagementFees extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HarvestManagementFees entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HarvestManagementFees must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HarvestManagementFees", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HarvestManagementFees | null {
    return changetype<HarvestManagementFees | null>(
      store.get_in_block("HarvestManagementFees", id),
    );
  }

  static load(id: string): HarvestManagementFees | null {
    return changetype<HarvestManagementFees | null>(
      store.get("HarvestManagementFees", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amountToDAO(): BigInt {
    let value = this.get("amountToDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToDAO(value: BigInt) {
    this.set("amountToDAO", Value.fromBigInt(value));
  }

  get amountToStrategist(): BigInt {
    let value = this.get("amountToStrategist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToStrategist(value: BigInt) {
    this.set("amountToStrategist", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class HarvestPerformanceFees extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save HarvestPerformanceFees entity without an ID",
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type HarvestPerformanceFees must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("HarvestPerformanceFees", id.toString(), this);
    }
  }

  static loadInBlock(id: string): HarvestPerformanceFees | null {
    return changetype<HarvestPerformanceFees | null>(
      store.get_in_block("HarvestPerformanceFees", id),
    );
  }

  static load(id: string): HarvestPerformanceFees | null {
    return changetype<HarvestPerformanceFees | null>(
      store.get("HarvestPerformanceFees", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get vault(): string {
    let value = this.get("vault");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set vault(value: string) {
    this.set("vault", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get amountToDAO(): BigInt {
    let value = this.get("amountToDAO");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToDAO(value: BigInt) {
    this.set("amountToDAO", Value.fromBigInt(value));
  }

  get amountToStrategist(): BigInt {
    let value = this.get("amountToStrategist");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amountToStrategist(value: BigInt) {
    this.set("amountToStrategist", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class VaultLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Vault[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Vault[]>(value);
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}

export class RebalanceLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Rebalance[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Rebalance[]>(value);
  }
}

export class RedeemLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Redeem[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Redeem[]>(value);
  }
}

export class HarvestManagementFeesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HarvestManagementFees[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HarvestManagementFees[]>(value);
  }
}

export class HarvestPerformanceFeesLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): HarvestPerformanceFees[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<HarvestPerformanceFees[]>(value);
  }
}

export class VaultSnapshotLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): VaultSnapshot[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<VaultSnapshot[]>(value);
  }
}
